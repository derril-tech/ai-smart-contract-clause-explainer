version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: clauselens-postgres
    environment:
      POSTGRES_DB: clauselens
      POSTGRES_USER: clauselens
      POSTGRES_PASSWORD: clauselens_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clauselens -d clauselens"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - clauselens-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: clauselens-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - clauselens-network

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: clauselens-api
    environment:
      - DATABASE_URL=postgresql://clauselens:clauselens_password@postgres:5432/clauselens
      - REDIS_URL=redis://:redis_password@redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ENVIRONMENT=development
    volumes:
      - ./apps/api:/app
      - /app/__pycache__
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - clauselens-network

  # Frontend Web App
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-builder
    container_name: clauselens-web
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NODE_ENV=development
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - api
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - clauselens-network

  # Celery Worker (for background tasks)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: clauselens-worker
    environment:
      - DATABASE_URL=postgresql://clauselens:clauselens_password@postgres:5432/clauselens
      - REDIS_URL=redis://:redis_password@redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ENVIRONMENT=development
    volumes:
      - ./apps/api:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery worker --loglevel=info
    networks:
      - clauselens-network

  # Celery Beat (for scheduled tasks)
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: clauselens-beat
    environment:
      - DATABASE_URL=postgresql://clauselens:clauselens_password@postgres:5432/clauselens
      - REDIS_URL=redis://:redis_password@redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ENVIRONMENT=development
    volumes:
      - ./apps/api:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery beat --loglevel=info
    networks:
      - clauselens-network

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: clauselens-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - clauselens-network

  grafana:
    image: grafana/grafana:latest
    container_name: clauselens-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - clauselens-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  clauselens-network:
    driver: bridge
